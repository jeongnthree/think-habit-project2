// src/app/auth/google/callback/route.ts
// Google OAuth 콜백 처리 및 Supabase 세션 생성

import { createClient } from '@/lib/supabase/server';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get('code');
  const state = requestUrl.searchParams.get('state');
  const error = requestUrl.searchParams.get('error');

  console.log('🔄 Google OAuth 콜백 처리:', {
    code: !!code,
    error,
    state: !!state,
  });

  // 오류 처리
  if (error) {
    console.error('❌ Google OAuth 오류:', error);
    return NextResponse.redirect(
      new URL(
        `/login?error=${encodeURIComponent('Google 로그인에 실패했습니다.')}`,
        requestUrl.origin
      )
    );
  }

  // 코드 확인
  if (!code) {
    console.error('❌ 인증 코드 없음');
    return NextResponse.redirect(
      new URL('/login?error=인증+코드가+없습니다.', requestUrl.origin)
    );
  }

  try {
    // State 파라미터 파싱
    let redirectTo = '/dashboard';
    if (state) {
      try {
        const stateData = JSON.parse(Buffer.from(state, 'base64').toString());
        redirectTo = stateData.redirectTo || '/dashboard';
      } catch (e) {
        console.warn('⚠️ State 파라미터 파싱 실패:', e);
      }
    }

    // 1. Google에서 토큰 교환
    console.log('🔄 Google 토큰 교환 시작');
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!,
        client_secret: process.env.GOOGLE_CLIENT_SECRET!,
        code,
        grant_type: 'authorization_code',
        redirect_uri: `${process.env.NEXT_PUBLIC_APP_URL}/auth/google/callback`,
      }),
    });

    if (!tokenResponse.ok) {
      const errorData = await tokenResponse.text();
      console.error('❌ 토큰 교환 실패:', errorData);
      throw new Error('토큰 교환에 실패했습니다.');
    }

    const tokens = await tokenResponse.json();
    console.log('✅ 토큰 교환 성공');

    // 2. Google에서 사용자 정보 가져오기
    console.log('🔄 Google 사용자 정보 조회');
    const userResponse = await fetch(
      'https://www.googleapis.com/oauth2/v2/userinfo',
      {
        headers: {
          Authorization: `Bearer ${tokens.access_token}`,
        },
      }
    );

    if (!userResponse.ok) {
      throw new Error('사용자 정보 조회에 실패했습니다.');
    }

    const googleUser = await userResponse.json();
    console.log('✅ Google 사용자 정보 조회 성공:', googleUser.email);

    // 3. Supabase에서 사용자 확인/생성
    const supabase = createClient();

    // 기존 사용자 확인
    const { data: existingUser, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', googleUser.email)
      .single();

    let userId: string;

    if (userError || !existingUser) {
      // 새 사용자 생성
      console.log('🔄 새 사용자 생성:', googleUser.email);

      // Supabase Auth에 사용자 생성
      const { data: authData, error: authError } =
        await supabase.auth.admin.createUser({
          email: googleUser.email,
          email_confirm: true,
          user_metadata: {
            name: googleUser.name,
            picture: googleUser.picture,
            provider: 'google',
          },
        });

      if (authError || !authData.user) {
        console.error('❌ Auth 사용자 생성 실패:', authError);
        throw new Error('사용자 생성에 실패했습니다.');
      }

      userId = authData.user.id;

      // Users 테이블에 프로필 생성
      const { error: profileError } = await supabase.from('users').insert({
        auth_id: userId,
        email: googleUser.email,
        role: 1, // 기본 역할: 학습자
        status: 'active',
        profile: {
          name: googleUser.name,
          avatar_url: googleUser.picture,
          preferences: {
            notifications: {
              email: true,
              push: true,
            },
            privacy: {
              profile_visibility: 'public',
            },
          },
        },
      });

      if (profileError) {
        console.error('❌ 프로필 생성 실패:', profileError);
        // Auth 사용자는 생성되었으므로 계속 진행
      }

      console.log('✅ 새 사용자 생성 완료');
    } else {
      userId = existingUser.auth_id;
      console.log('✅ 기존 사용자 확인:', googleUser.email);
    }

    // 4. Supabase 세션 생성
    console.log('🔄 Supabase 세션 생성');
    const { data: sessionData, error: sessionError } =
      await supabase.auth.admin.generateLink({
        type: 'magiclink',
        email: googleUser.email,
      });

    if (sessionError) {
      console.error('❌ 세션 생성 실패:', sessionError);
      throw new Error('세션 생성에 실패했습니다.');
    }

    console.log('✅ Google OAuth 로그인 완료:', googleUser.email);

    // 5. 성공 리디렉션
    const response = NextResponse.redirect(
      new URL(redirectTo, requestUrl.origin)
    );

    // 세션 쿠키 설정 (필요한 경우)
    if (tokens.access_token) {
      response.cookies.set('google-oauth-success', 'true', {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        maxAge: 60 * 5, // 5분
      });
    }

    return response;
  } catch (error) {
    console.error('❌ Google OAuth 콜백 처리 오류:', error);
    return NextResponse.redirect(
      new URL(
        `/login?error=${encodeURIComponent('Google 로그인 처리 중 오류가 발생했습니다.')}`,
        requestUrl.origin
      )
    );
  }
}
